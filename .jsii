{
  "author": {
    "email": "mziyabo@live.com",
    "name": "mziyabo",
    "roles": [
      "author"
    ]
  },
  "dependencies": {
    "constructs": "^2.0.1"
  },
  "dependencyClosure": {
    "constructs": {
      "targets": {
        "dotnet": {
          "namespace": "Constructs",
          "packageId": "Constructs"
        },
        "java": {
          "maven": {
            "artifactId": "constructs",
            "groupId": "software.constructs"
          },
          "package": "software.constructs"
        },
        "js": {
          "npm": "constructs"
        },
        "python": {
          "distName": "constructs",
          "module": "constructs"
        }
      }
    }
  },
  "description": "cdk8s-xray",
  "homepage": "https://github.com/mziyabo/cdk8s-xray#readme",
  "jsiiVersion": "1.5.0 (build 46538f8)",
  "license": "Apache-2.0",
  "name": "cdk8s-xray",
  "readme": {
    "markdown": "## AWS X-Ray [cdk8s](cdk8s.io/) construct\nProvides a cdk8s Construct to synthesize [AWS X-Ray](https://docs.aws.amazon.com/xray/latest/devguide/aws-xray.html) api-resources on Amazon EKS clusters\n\n![Build](https://github.com/mziyabo/cdk8s-xray/workflows/Build/badge.svg?branch=master)\n[![NPM Version](https://img.shields.io/npm/v/cdk8s-xray.svg)](https://npmjs.org/package/cdk8s-xray)\n\n\n### Installation and Usage\n\nInstall `cdk8s-xray` construct from `npm` or `yarn`:\n\n```\nnpm install -s cdk8s-xray\n```\n\nUsage:\n\n``` typescript\nimport { XRayApp, DaemonProtocol, XRayConfig } from 'cdk8s-xray'\n\n// inside your chart:\nlet config: XRayConfig = {\n    image: \"rnzdocker1/eks-workshop-x-ray-daemon:dbada4c77e6ae10ecf5a7b1c5864aa6522d9fb02\",\n    ns: \"default\",\n    daemon: {\n        daemonProtocol: DaemonProtocol.UDP,\n        port: 2000,\n        logLevel: \"prod\"\n    }\n}\n\nnew XRayApp(this, 'prod', config);\n```\n\n### Features:\n- Adapted from the [EKS Workshop X-Ray](https://eksworkshop.com/intermediate/245_x-ray/x-ray-daemon/). A few `cdk8s` quirks make the generated manifest different though:\n\n    <details>\n    <summary>manifest.k8s.yaml</summary>\n    apiVersion: rbac.authorization.k8s.io/v1\n    kind: ClusterRoleBinding\n    metadata:\n    name: xray-prod-clusterrolebinding-xray-daemon-b962136e\n    roleRef:\n    apiGroup: rbac.authorization.k8s.io\n    kind: ClusterRole\n    name: cluster-admin\n    subjects:\n    - kind: ServiceAccount\n        name: xray-daemon\n        namespace: default\n    ---\n    apiVersion: v1\n    kind: Service\n    metadata:\n    name: xray-service\n    spec:\n    clusterIP: None\n    ports:\n        - name: incoming\n        port: 2000\n        protocol: UDP\n    selector:\n        app: xray-daemon\n        cdk8s/chart: xray\n    ---\n    apiVersion: v1\n    kind: ServiceAccount\n    metadata:\n    labels:\n        app: xray-daemon\n        cdk8s/chart: xray\n    name: xray-daemon\n    namespace: default\n    ---\n    apiVersion: apps/v1\n    kind: DaemonSet\n    metadata:\n    name: xray-prod-daemonset-xray-daemon-fcac88af\n    spec:\n    selector:\n        matchLabels:\n        app: xray-daemon\n        cdk8s/chart: xray\n    template:\n        metadata:\n        labels:\n            app: xray-daemon\n            cdk8s/chart: xray\n        spec:\n        containers:\n            - command:\n                - /usr/bin/xray\n                - -c\n                - /aws/xray/config.yaml\n            image: rnzdocker1/eks-workshop-x-ray-daemon:dbada4c77e6ae10ecf5a7b1c5864aa6522d9fb02\n            imagePullPolicy: Always\n            name: xray-daemon\n            ports:\n                - containerPort: 2000\n                hostPort: 2000\n                name: xray-ingest\n                protocol: UDP\n            resources:\n                limits:\n                memory: 24Mi\n            volumeMounts:\n                - mountPath: /aws/xray\n                name: config-volume\n                readOnly: true\n        hostNetwork: true\n        volumes:\n            - configMap:\n                name: xray-config\n            name: config-volume\n    updateStrategy:\n        type: RollingUpdate\n    ---\n    apiVersion: v1\n    data:\n    config.yaml: >-\n        # Maximum buffer size in MB (minimum 3). Choose 0 to use 1% of host memory.\n\n        TotalBufferSizeMB: 0\n\n        # Maximum number of concurrent calls to AWS X-Ray to upload segment documents.\n\n        Concurrency: 8\n\n        # Send segments to AWS X-Ray service in a specific region\n\n        Region: \"\"\n\n        # Change the X-Ray service endpoint to which the daemon sends segment documents.\n\n        Endpoint: \"\"\n\n        Socket:\n        # Change the address and port on which the daemon listens for UDP packets containing segment documents.\n        # Make sure we listen on all IP's by default for the k8s setup\n        UDPAddress: 0.0.0.0:2000\n        Logging:\n        LogRotation: true\n        # Change the log level, from most verbose to least: dev, debug, info, warn, error, prod (default).\n        LogLevel: prod\n        # Output logs to the specified file path.\n        LogPath: \"\"\n        # Turn on local mode to skip EC2 instance metadata check.\n\n        LocalMode: false\n\n        # Amazon Resource Name (ARN) of the AWS resource running the daemon.\n\n        ResourceARN: \"\"\n\n        # Assume an IAM role to upload segments to a different account.\n\n        RoleARN: \"\"\n\n        # Disable TLS certificate verification.\n\n        NoVerifySSL: false\n\n        # Upload segments to AWS X-Ray through a proxy.\n\n        ProxyAddress: \"\"\n\n        # Daemon configuration file format version.\n\n        Version: 1\n    kind: ConfigMap\n    metadata:\n    name: xray-config\n\n    </details>\n\n### Release Notes:\nInitial Release, Contributions welcome\n\n### License:\nApache-2.0"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/mziyabo/cdk8s-xray"
  },
  "schema": "jsii/0.10.0",
  "targets": {
    "js": {
      "npm": "cdk8s-xray"
    },
    "python": {
      "distName": "cdk8s-xray",
      "module": "cdk8s-xray"
    }
  },
  "types": {
    "cdk8s-xray.DaemonProtocol": {
      "assembly": "cdk8s-xray",
      "fqn": "cdk8s-xray.DaemonProtocol",
      "kind": "enum",
      "locationInModule": {
        "filename": "src\\xrayapp.ts",
        "line": 45
      },
      "members": [
        {
          "name": "UDP"
        },
        {
          "name": "TCP"
        }
      ],
      "name": "DaemonProtocol"
    },
    "cdk8s-xray.DaemonSettings": {
      "assembly": "cdk8s-xray",
      "datatype": true,
      "fqn": "cdk8s-xray.DaemonSettings",
      "kind": "interface",
      "locationInModule": {
        "filename": "src\\xrayapp.ts",
        "line": 26
      },
      "name": "DaemonSettings",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "summary": "Protocol to use for AWS X-Ray Daemon."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src\\xrayapp.ts",
            "line": 31
          },
          "name": "daemonProtocol",
          "type": {
            "fqn": "cdk8s-xray.DaemonProtocol"
          }
        },
        {
          "abstract": true,
          "docs": {
            "summary": "Port number for AWS X-Ray Daemon."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src\\xrayapp.ts",
            "line": 36
          },
          "name": "port",
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "summary": "Log level for AWS X-Ray Daemon."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src\\xrayapp.ts",
            "line": 41
          },
          "name": "logLevel",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "cdk8s-xray.XRayApp": {
      "assembly": "cdk8s-xray",
      "base": "constructs.Construct",
      "fqn": "cdk8s-xray.XRayApp",
      "initializer": {
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "name",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "config",
            "type": {
              "fqn": "cdk8s-xray.XRayConfig"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src\\xrayapp.ts",
        "line": 50
      },
      "name": "XRayApp"
    },
    "cdk8s-xray.XRayConfig": {
      "assembly": "cdk8s-xray",
      "datatype": true,
      "fqn": "cdk8s-xray.XRayConfig",
      "kind": "interface",
      "locationInModule": {
        "filename": "src\\xrayapp.ts",
        "line": 8
      },
      "name": "XRayConfig",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "summary": "AWS X-Ray Daemon Settings."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src\\xrayapp.ts",
            "line": 23
          },
          "name": "daemon",
          "type": {
            "fqn": "cdk8s-xray.DaemonSettings"
          }
        },
        {
          "abstract": true,
          "docs": {
            "summary": "Image to use for AWS X-Ray Daemon."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src\\xrayapp.ts",
            "line": 18
          },
          "name": "image",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "summary": "Namespace to deploy chart resources into."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src\\xrayapp.ts",
            "line": 13
          },
          "name": "ns",
          "type": {
            "primitive": "string"
          }
        }
      ]
    }
  },
  "version": "0.1.1",
  "fingerprint": "gduxw1Uqg8YQSWBBRvXY2fLmo7MO+JIAbTuDt9xEjd8="
}
